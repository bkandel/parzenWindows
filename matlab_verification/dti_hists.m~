% This mfile will generate the 2-D histograms of
% the angles and principal eigenvectors of DTI 
% data and save them. 

function dti_hists(folder, fileName, sigma, numBins)
 
sigma = sigma; 
subj = fileName; 
folder = folder;
[eigVectors, eigValues, Tensor, Names] = dti_distance_load_fun_brainMask(folder); 
for i = 1:20
    Tensor{i} = double(Tensor{i}); 
end

%% Get principal eigenvectors and angles


% Get principal eigenvectors
prinEigVector = getPrinEigVec(eigVectors, eigValues); 


% Get angle of vector
[angles, lambda] = getAngles(eigVectors, prinEigVector); 



% Define minima and maxima for phi and theta: 
% Phi defined as angle from azimuth, theta 
% defined as angle from horizontal (x-axis). 
% Phi (vertical angle) ranges from 0 to pi, theta
% from 0 to 2 * pi. 
minXY = [0 0]; 
maxXY = [pi 2*pi];

numBins = numBins; 

% Define 2-D Gaussian filter for convolution
gaussFilter = fspecial('gaussian', (sigma * 6 + 1), sigma); 

% Define inputs for 2-D histogram
xedges = linspace(minXY(1), maxXY(1), numBins); 
yedges = linspace(minXY(2), maxXY(2), numBins); 
% Initialize histogram and PDF arrays
histmat = zeros(numBins, numBins, length(angles)); 
pdfmat = zeros(numBins, numBins, length(angles));

for i = 1:length(angles)
    histmat(:, :, i) = hist2(angles{i}(:,1), angles{i}(:,2), xedges, yedges); 
    % Convert histogram to population density f'n
    totalNum = sum(sum(histmat(:, :, i))); 
    pdfmat(:, :, i) = histmat(:, :, i) / totalNum; 
    % Convolve with Gaussian filter for Parzen windowing
    pdfmat(:, :, i) = conv2(pdfmat(:, :, i), gaussFilter, 'same'); 
    anglePdf{i} = pdfmat(:, :, i);
    anglePdfLog{i} = log(pdfmat(:, :, i)); 
end


% for i = 1:10
%     subplot(2,5,i);
%     mesh(gridx1, gridx2, nonPara{i}); 
%     title(Names{i}); 
%     xlabel('\psi'); 
%     ylabel('\theta');
% end

%{
for i = 1:20
    angle1bin{i} = angles{i}(:,1); 
    angle1bin{i} = angle1bin{i} * numBins / 180; 
    angle1bin{i} = floor(angle1bin{i}); 
    angle1bin{i} = angle1bin{i} + numBins/2+1; 

    angle2bin{i} = angles{i}(:,2); 
    angle2bin{i} = angle2bin{i} * numBins / 180; 
    angle2bin{i} = floor(angle2bin{i}); 
    angle2bin{i} = angle2bin{i} + numBins/2+1; 
end
%}

%% Do same for lambda
%{
minXY = [0 0]; 
maxXY = [1 1];
numBins = 2^5; 
for i = 1:length(lambda)
    [bandwidth, density, X, Y] = kde2d(lambda{i}, numBins, minXY, maxXY);
    density = density / sum(sum(density)); 
    density = density';
    lambdaPdf{i} = density; 
    lambdaPdfLog{i} = log(density); 
    subplot(4,5,i); 
    surf(X,Y,lambdaPdf{i})

end


%{
for i = 1:10
    nonParaProbLam = ksdensity2d(double(lambda{i}),gridx1,gridx2); 
    sumNonParaLam(i) = sum(sum(nonParaProbLam)); 
    nonParaLam{i} = nonParaProbLam / sumNonParaLam(i);
    logNonParaLam{i} = log(nonParaLam{i}); 
    sum(sum(nonParaLam{i}));
end
%}

%{
for i = 1:10
    subplot(2,5,i);
    mesh(gridx1, gridx2, nonParaLam{i}); 
    title(Names{i}); 
    xlabel('\lambda_2'); 
    ylabel('\lambda_1');
end
%}
for i = 1:20
    lambda1bin{i} = lambda{i}(:,1); 
    lambda1bin{i} = lambda1bin{i} * numBins ; 
    lambda1bin{i} = floor(lambda1bin{i}); 
    lambda1bin{i} = lambda1bin{i}+1; 
    
    lambda2bin{i} = lambda{i}(:,2); 
    lambda2bin{i} = lambda2bin{i} * numBins;
    lambda2bin{i} = floor(lambda2bin{i}); 
    lambda2bin{i} = lambda2bin{i}+1; 

end
%}

%%

%{
for i = 1:10
    for j = 1:10
        for k = 1:length(angle1bin{i})
%             probabilityAngle{i,j}(k) = anglePdf{j}(angle1bin{i}(k), angle2bin{i}(k));
            probabilityAngleLog{i,j}(k) = anglePdfLog{j}(angle1bin{i}(k), angle2bin{i}(k)); 

           % probabilityShape{i,j}(k) = lambdaPdf{j}(lambda1bin{i}(k), ...
           %     lambda2bin{i}(k)); 
            

        end
%             meanProbAngle(i,j) = mean(probabilityAngle{i,j}); 
            meanProbAngleLog{1}(i,j) = mean(probabilityAngleLog{i,j}); 
%             medProbAngle(i,j) = median(probabilityAngle{i,j}); 
          %  meanProbShape(i,j) = mean(probabilityShape{i,j}); 
%         probabilityTotal{i,j} = probabilityAngle{i,j} .* probabilityShape{i,j}; 
%         meanProb(i,j) = mean(probabilityTotal{i,j}); 
%         medProb(i,j) = median(probabilityTotal{i,j}); 

%         meanProb(i,j) = mean(probability{i,j}); 
    end
    progressbar([], [], i/10)
end
 
meanProbAngleLog{1} = abs(meanProbAngleLog{1});
meanDiag = diag(meanProbAngleLog{1}); 
maxMean = min(meanProbAngleLog{1}'); 
missesMean = meanDiag ~= maxMean'; 
sum(missesMean)



% medProbAngle
% medDiag = diag(medProbAngle); 
% maxMed = max(medProbAngle'); 
% missesMed = medDiag ~= maxMed'; 
% sum(missesMed)

%xlswrite('distanceCompare.xls',meanProb,'totalNonPara'); 
%progressbar('Calculating Mean Probabilities for Subject 2'); 

for i = 11:20
    for j = 11:20
        for k = 1:length(angle1bin{i})
%             probabilityAngle{i,j}(k) = anglePdf{j}(angle1bin{i}(k), angle2bin{i}(k));
            probabilityAngleLog{i,j}(k) = anglePdfLog{j}(angle1bin{i}(k), angle2bin{i}(k)); 

           % probabilityShape{i,j}(k) = lambdaPdf{j}(lambda1bin{i}(k), ...
           %     lambda2bin{i}(k)); 
            

        end
%             meanProbAngle(i,j) = mean(probabilityAngle{i,j}); 
            meanProbAngleLog{2}(i-10,j-10) = mean(probabilityAngleLog{i,j}); 
%             medProbAngle(i,j) = median(probabilityAngle{i,j}); 
          %  meanProbShape(i,j) = mean(probabilityShape{i,j}); 
%         probabilityTotal{i,j} = probabilityAngle{i,j} .* probabilityShape{i,j}; 
%         meanProb(i,j) = mean(probabilityTotal{i,j}); 
%         medProb(i,j) = median(probabilityTotal{i,j}); 

%         meanProb(i,j) = mean(probability{i,j}); 
    end
    progressbar([], [], (i-10)/10)
end
meanProbAngleLog{2} = abs(meanProbAngleLog{2})
meanDiag = diag(meanProbAngleLog{2}); 
maxMean = min(meanProbAngleLog{2}'); 
missesMean = meanDiag ~= maxMean'; 
sum(missesMean)
%}

%{
% medProb
% medDiag = diag(medProb); 
% maxMed = min(medProb'); 
% missesMed = medDiag ~= maxMed'; 
% sum(missesMed)


% 
% tic
% [X Y]=meshgrid(-90:2:90);
% for i = 1:10
%     x1=angles{i}(:,1);
%     y1=angles{i}(:,2);
%     [XI, YI] = meshgrid(x1, y1); 
%     Z=nonPara{i};        
%     ZI=double(interp2(X,Y,Z,XI,YI));
%     figure; contour(X,Y,Z); 
%     figure; contour(XI, YI, ZI); 
%     %distNonpara(i,j) = mean(probability); 
% end
% toc

% [X Y]=meshgrid(-90:2:90);
% for i = 1:10
%     for j = 1:10       
%         x1=angles{i}(:,1);
%         y1=angles{i}(:,2);
%         [XI, YI] = meshgrid(x1, y1); 
%         Z=nonPara{j};        
%         probability{=interp2(X,Y,Z,XI,YI);
%         %distNonpara(i,j) = mean(probability); 
%     end
% end

% sum=sum(distNonpara(:));
% distNonpara2=zeros(10,10);
% for i=1:10
%     for j=1:10
%         distNonpara2(i,j)=distNonpara(i,j)./sum;
%     end
% end
% xlswrite('nonparametric2b.xls',distNonpara2,'totalNonpara');
%}

%% Calculate Distances
%Mahalanobis

    